[["introducci√≥n-a-r.html", "2 Introducci√≥n a R 2.1 Instalaci√≥n de R, RStudio y RTools 2.2 ¬øQu√© es R? 2.3 ¬øQu√© es RStudio? 2.4 ¬øQu√© otros IDE‚Äôs existen para R? 2.5 Diferencias entre paquetes y librer√≠as 2.6 Tipos de lenguajes de programaci√≥n 2.7 Paradigmas de programaci√≥n 2.8 Ambiente de trabajo en RStudio 2.9 Mi primer ‚ÄúHello world‚Äù 2.10 Tipos de datos en R 2.11 Tipos de estructuras de datos 2.12 Lectura / escritura de datos (.csv, .xlsx, .RData, .rds) 2.13 Ejercicios:", " 2 Introducci√≥n a R 2.1 Instalaci√≥n de R, RStudio y RTools 2.1.1 R Distribuci√≥n e instalaci√≥n - Para instalar R hay que bajar un fichero ejecutable de la p√°gina web del proyecto R: http://www.r-project.org/ - Actualmente (Mayo 2021), la versi√≥n m√°s reciente de R para el entorno Windows es la 4.1.0 y el ejecutable de tama√±o aproximadamente 86Mb tiene el nombre R-4.1.0-win.exe - Una vez bajado este ejecutable, hay que ejecutarlo y seguir las instrucciones del programa de instalaci√≥n. 2.1.2 Rstudio RStudio es un editor para scripts disponible para usuarios de R en todos los sistemas operativos. - Es considerado como un entorno de desarrollo integrado (GUI) que combina un interfaz muy intuitiva con herramientas de c√≥digo muy potentes que permiten sacar el m√°ximo provecho a R. - La versi√≥n en pruebas es gratuita y est√° disponible en http://www.rstudio.org/ - La ventaja de este editor es que ofrece una serie de opciones no existentes en R, entre otras, por ejemplo, comprobar r√°pidamente que ning√∫n par√©ntesis queda sin cerrarse o marcar, copiar y pegar columnas. - Pero adem√°s nos da un listado de las variables y nos da una descripci√≥n de los bancos de datos que hemos introducido. Tambi√©n tiene una lista de los paquetes instalados y los gr√°ficos realizados. 2.1.3 RTools Herramientas para construir paquetes de R. Esto es lo que desea para construir sus propios paquetes en Windows, o para construir R por s√≠ mismo. A partir de R 4.0.0 (lanzado en abril de 2020), R para Windows usa un paquete de cadena de herramientas llamado rtools40. Esta versi√≥n de Rtools incluye gcc 8.3.0 e introduce un nuevo sistema de compilaci√≥n basado en msys2`, que facilita la compilaci√≥n y el mantenimiento de R, as√≠ como las bibliotecas del sistema que necesitan los paquetes de R en Windows. Las compilaciones recientes de rtools40 tambi√©n contienen una cadena de herramientas adicional gcc-10 ucrt para probar paquetes de R y bibliotecas del sistema con las compilaciones ucrt experimentales de R-devel. Para obtener m√°s informaci√≥n sobre estos temas, siga los enlaces al final de este documento. Jeroen Ooms mantiene la versi√≥n actual de Rtools. El profesor Brian Ripley y Duncan Murdoch prepararon ediciones anteriores. El mejor lugar para informar errores es a trav√©s de la organizaci√≥n r-windows en GitHub. 2.2 ¬øQu√© es R? Proporciona un amplio abanico de herramientas estad√≠sticas (modelos lineales y no lineales, tests estad√≠sticos, an√°lisis de series temporales, algoritmos de clasificaci√≥n y agrupamiento, etc.). Permite definir funciones propias. De hecho, gran parte de las funciones de R est√°n escritas en el mismo R, aunque para algoritmos computacionalmente exigentes es posible desarrollar bibliotecas en C, C++ o Fortran que se cargan din√°micamente. R hereda de S su orientaci√≥n a objetos. R puede integrarse con distintas bases de datos y existen bibliotecas que facilitan su utilizaci√≥n desde lenguajes de programaci√≥n interpretados como Python (PythonInR) ‚ù§Ô∏è. Otra de las caracter√≠sticas de R es su capacidad gr√°fica, que permite generar gr√°ficos con alta calidad (ggplot). R posee su propio formato para la documentaci√≥n basado en LaTeX. 2.3 ¬øQu√© es RStudio? RStudio es un editor para scripts disponible para usuarios de R en todos los sistemas operativos. Es considerado como un entorno de desarrollo integrado (GUI) üï£ que combina un interfaz muy intuitiva con herramientas de c√≥digo muy potentes que permiten sacar el m√°ximo provecho a R. La versi√≥n en pruebas es gratuita y est√° disponible en http://www.rstudio.org/. La ventaja de este editor es que ofrece una serie de opciones no existentes en R, entre otras, por ejemplo, comprobar r√°pidamente que ning√∫n par√©ntesis queda sin cerrarse o marcar, copiar y pegar columnas. Pero adem√°s nos da un listado de las variables y nos da una descripci√≥n de los bancos de datos que hemos introducido. Tambi√©n tiene una lista de los paquetes instalados y los gr√°ficos realizados. 2.4 ¬øQu√© otros IDE‚Äôs existen para R? Tinn-R RKward Rcommander Jupyter notebook Visual studio code Pycharm Eclipse 2.5 Diferencias entre paquetes y librer√≠as En el caso de la funci√≥n library(), en muchas ocasiones existe la confusi√≥n entre un paquete y una librer√≠a, y podemos encontrarnos con gente llamando ‚Äúlibrer√≠as‚Äù a los paquetes. Una cosa es la funci√≥n library() usada para cargar un paquete, y que se refiere al lugar en d√≥nde el paquete es localizado, habitualmente una carpeta en nuestro ordenador, y otra un paquete que es una colecci√≥n de funciones y datos empaquetados de forma conveniente. Dicho de otra manera, y en palabras de Hadley Wickham, cient√≠fico de datos en RStudio, y creador de la gran mayor√≠a de paquetes del ecosistema tidyverse: De igual manera, para recordar la diferencia es ejecutar la funci√≥n library() sin argumentos. Esto nos proporcionar√° una lista de paquetes instalados en diferentes librer√≠as en nuestro ordenador. # Install packages install.packages(&quot;tidyverse&quot;) # Load packages library(tidyverse) # You can also use &quot;pacman&quot; package to install # an loading other packages if (!require(&quot;pacman&quot;)) { install.packages(&quot;pacman&quot;) } pacman::p_load( tidyverse, formatR, knitr, rmdformats, pander, labelled, readxl, magrittr, kableExtra ) 2.6 Tipos de lenguajes de programaci√≥n 2.6.1 Lenguaje compilado Son aquellos lenguajes de alto nivel que como su nombre lo sugiere, requieren de un compilador (programa que traduce un lenguaje de alto nivel en c√≥digo m√°quina o lenguaje m√°quina) para traducirlo y crear la parte ejecutable. C++ Go 2.6.2 Lenguaje interpretado Son aquellos lenguajes de programaci√≥n tambi√©n de alto nivel en donde el c√≥digo fuente debe ser traducido a un lenguaje que la m√°quina entienda y pueda realizar, no crean un archivo externo. Ruby Javascript Python R Los lenguajes de alto nivel permiten escribir instrucciones en un idioma muy parecido al ingl√©s as√≠ como hacer uso de notaciones matem√°ticas comunes. 2.6.3 Lenguaje intermedio Los lenguajes intermedios son compilados hacia programas intermedios y luego interpretados, esto permite que pueda ser ejecutado desde cualquier sistema operativo sin necesidad de crear ejecutables. Java C# 2.7 Paradigmas de programaci√≥n Un paradigma de programaci√≥n es una manera o estilo de programaci√≥n de software. Se trata de un conjunto de m√©todos sistem√°ticos aplicables en todos los niveles del dise√±o de programas para resolver problemas computacionales. 2.7.1 Programaci√≥n Orientado a Objetos Se construyen modelos de objetos que representan elementos (objetos) del problema a resolver, que tienen caracter√≠sticas y funciones. Permite separar los diferentes componentes de un programa, simplificando as√≠ su creaci√≥n, depuraci√≥n y posteriores mejoras. La programaci√≥n orientada a objetos disminuye los errores y promociona la reutilizaci√≥n del c√≥digo. Es una manera especial de programar, que se acerca de alguna manera a c√≥mo expresar√≠amos las cosas en la vida real. 2.7.2 Programaci√≥n Funcional La programaci√≥n funcional es un paradigma declarativo. Nos enfocaremos en ‚Äúqu√©‚Äù estamos haciendo y no en ‚Äúc√≥mo‚Äù se est√° haciendo que ser√≠a el enfoque imperativo. Esto quiere decir que se expresa nuestra l√≥gica sin describir controles de flujo, ni ciclos ni condicionales. 2.8 Ambiente de trabajo en RStudio 2.9 Mi primer ‚ÄúHello world‚Äù print(&quot;Hello world&quot;) ## [1] &quot;Hello world&quot; 2.10 Tipos de datos en R R es capaz de manejar una variedad de tipos de datos, que se almacenan en diferentes estructuras como se puede observar en la siguiente tabla: Tipos de Datos Informaci√≥n Definici√≥n Numeric Datos contenidos en el conjuntos de los n√∫meros reales num &lt;- 3.14 Integer Datos contenidos en el conjuntos de los n√∫meros enteros int &lt;- 3L Character Datos que soportan cadenas de caracteres chr &lt;- \"hello world\" Complex Datos que soportan n√∫meros complejos comp &lt;- 3+2i Logical Datos que s√≥lo soportan valores l√≥gicos de verdadero (T) o falso (F) a &lt;- 1; b &lt;- 2; a &lt; b Factor Este no es estrictamente un tipo de dato, pero vale la pena describirlo aqu√≠. Una variable factor es una variable categ√≥rica. Los vectores de caracteres a menudo se almacenan como factores para explotar funciones para tratar datos categ√≥ricos. Por ejemplo, en an√°lisis de regresi√≥n Aplique as.factor() a un vector de caracteres o num√©ricos 2.11 Tipos de estructuras de datos Objetos Tipos ¬øSoporta varios tipos de datos en el mismo objeto? Vector Num√©rico, car√°cter, complejo o l√≥gico No Factor Num√©rico o l√≥gico No Arreglo Num√©rico, car√°cter, complejo o l√≥gico No Matriz Num√©rico, car√°cter, complejo o l√≥gico No Data frame Num√©rico, car√°cter, complejo o l√≥gico S√≠ ts Num√©rico, car√°cter, complejo o l√≥gico S√≠ Lista Num√©rico, car√°cter, complejo, l√≥gico, funci√≥n, expresi√≥n, ‚Ä¶ S√≠ 2.11.1 Asignaci√≥n de objetos obj &lt;- c(5, 2, 6, 58, 456, 56, 5) obj ## [1] 5 2 6 58 456 56 5 c(5, 2, 6, 58, 456, 56, 5) -&gt; obj obj ## [1] 5 2 6 58 456 56 5 2.11.2 Vector Es el lemento m√°s b√°sico en R. Contiene elementos de la misma clase (son at√≥micos). Se crea con la funci√≥n c(), que significa ‚Äòconcatenar‚Äô o ‚Äòcombinar‚Äô. vector01 &lt;- c(1, 2, 4, 7, 10, 11, 12, 19, 26) vector01 ## [1] 1 2 4 7 10 11 12 19 26 vector02 &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;d&quot;, &quot;g&quot;, &quot;j&quot;, &quot;k&quot;, &quot;l&quot;, &quot;s&quot;, &quot;z&quot;) vector02 ## [1] &quot;a&quot; &quot;b&quot; &quot;d&quot; &quot;g&quot; &quot;j&quot; &quot;k&quot; &quot;l&quot; &quot;s&quot; &quot;z&quot; vector03 &lt;- c(&quot;jorge&quot;, &quot;roy&quot;, &quot;daniel&quot;, &quot;cesar&quot;, &quot;patin&quot;, 254, 265) vector03 ## [1] &quot;jorge&quot; &quot;roy&quot; &quot;daniel&quot; &quot;cesar&quot; &quot;patin&quot; &quot;254&quot; &quot;265&quot; vector04 &lt;- c(FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE) vector04 ## [1] FALSE FALSE FALSE TRUE TRUE TRUE TRUE 2.11.2.1 Algunas operaciones con vectores # indexar vectores vector01 ## [1] 1 2 4 7 10 11 12 19 26 vector01[4] ## [1] 7 # evaluar la naturaleza del vector a &lt;- vector01[4] is.vector(a) ## [1] TRUE is.numeric(a) ## [1] TRUE is.integer(a) ## [1] FALSE # operaciones con vectores length(vector01) ## [1] 9 (vector01 * 2) + 500 ## [1] 502 504 508 514 520 522 524 538 552 sum(vector01) ## [1] 92 sqrt(vector01 - 1) ## [1] 0.000000 1.000000 1.732051 2.449490 3.000000 3.162278 3.316625 4.242641 ## [9] 5.000000 vector01 + (vector01 * 2) ## [1] 3 6 12 21 30 33 36 57 78 2.11.2.2 Secuencias num√©ricas # x:y puede leerse como ‚Äúsecuencia de x a(:) y‚Äù 1:20 ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 pi:10 ## [1] 3.141593 4.141593 5.141593 6.141593 7.141593 8.141593 9.141593 15:1 ## [1] 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 # seq(x,y,by,length) puede leerse como ‚Äúsecuencia de x a(:) y‚Äù con # &quot;by&quot; incrementos o &quot;length&quot; de elementos seq(0, 21) ## [1] 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 seq(0, 21, by = 3) ## [1] 0 3 6 9 12 15 18 21 seq(0, 21, length = 20) ## [1] 0.000000 1.105263 2.210526 3.315789 4.421053 5.526316 6.631579 ## [8] 7.736842 8.842105 9.947368 11.052632 12.157895 13.263158 14.368421 ## [15] 15.473684 16.578947 17.684211 18.789474 19.894737 21.000000 2.11.3 Factor En R, los factores se usan para trabajar con variables categ√≥ricas, es decir, variables que tienen un conjunto fijo y conocido de valores posibles. Tambi√©n son √∫tiles cuando quieres mostrar vectores de caracteres en un orden no alfab√©tico. Hist√≥ricamente, los factores eran m√°s sencillos de trabajar que los caracteres. Como resultado, muchas de las funciones de R base autom√°ticamente convierten los caracteres a factores. Esto significa que, a menudo, los factores aparecen en lugares donde no son realmente √∫tiles. Afortunadamente, no tienes que preocuparte de eso en el tidyverse y puedes concentrarte en situaciones en las que los factores son genuinamente √∫tiles. Si quieres aprender m√°s sobre factores, te recomendamos leer el art√≠culo de Amelia McNamara y Nicholas Horton, Wrangling categorical data in R (el nombre significa Domando/Manejando Datos Categ√≥ricos en R). Este art√≠culo cuenta parte de la historia discutida en stringsAsFactors: An unauthorized biography (del ingl√©s cadenasComoFactores: Una Biograf√≠a No Autorizada) y stringsAsFactors = (del ingl√©s cadenasComoFactores = ), y compara las propuestas tidy para los datos categ√≥ricos demostrados en este libro, en comparaci√≥n a los m√©todos de R base. Una versi√≥n temprana de este art√≠culo ayud√≥ a motivar y definir el alcance del paquete forcats. ¬°Gracias Amelia y Nick! Imagina que tienes una variable que registra meses: vect01 &lt;- c(&quot;Dec&quot;, &quot;Apr&quot;, &quot;Jan&quot;, &quot;Mar&quot;, &quot;Jan&quot;, &quot;Mar&quot;) Usar una cadena de caracteres (o string, en ingl√©s) para guardar esta variable tiene dos problemas: Solo hay doce meses posibles y no hay nada que te resguarde de errores de tipeo: vect02 &lt;- c(&quot;Dec&quot;, &quot;Apr&quot;, &quot;Jam&quot;, &quot;Mar&quot;, &quot;Jan&quot;, &quot;Mar&quot;) No se ordena de una forma √∫til: sort(vect02) ## [1] &quot;Apr&quot; &quot;Dec&quot; &quot;Jam&quot; &quot;Jan&quot; &quot;Mar&quot; &quot;Mar&quot; Puedes solucionar ambos problemas con un factor. Para crearlo, debes empezar definiendo una lista con los niveles v√°lidos: month_levels &lt;- month.abb Ahora puedes crear un factor: factor01 &lt;- factor(vect01, levels = month_levels) factor01 ## [1] Dec Apr Jan Mar Jan Mar ## Levels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec sort(factor01) ## [1] Jan Jan Mar Mar Apr Dec ## Levels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec Cualquier valor no fijado en el conjunto ser√° convertido a NA de forma silenciosa: factor02 &lt;- factor(vect02, levels = month_levels) factor02 ## [1] Dec Apr &lt;NA&gt; Mar Jan Mar ## Levels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec Si quieres una advertencia, puedes usar readr::parse_factor() (segmentar un factor, en ingl√©s): readr::parse_factor(vect02, levels = month_levels) ## Warning: 1 parsing failure. ## row col expected actual ## 3 -- value in level set Jam ## [1] Dec Apr &lt;NA&gt; Mar Jan Mar ## attr(,&quot;problems&quot;) ## # A tibble: 1 x 4 ## row col expected actual ## &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; ## 1 3 NA value in level set Jam ## Levels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec Si omites los niveles, se van a definir a partir de los datos en orden alfab√©tico: factor(vect01) ## [1] Dec Apr Jan Mar Jan Mar ## Levels: Apr Dec Jan Mar A veces es preferible que el orden de los niveles se corresponda con su primera aparici√≥n en los datos. Puedes hacer esto cuando creas el factor, al definir los niveles con unique(x) o despu√©s con fct_inorder(). factor(vect01, levels = unique(vect01)) ## [1] Dec Apr Jan Mar Jan Mar ## Levels: Dec Apr Jan Mar forcats::fct_inorder(factor(vect01)) ## [1] Dec Apr Jan Mar Jan Mar ## Levels: Dec Apr Jan Mar 2.11.4 Matrix Una matriz es una estructura bidimensional. Las filas son horizontales y las columnas son verticales. Una matriz de 4 por 3 (4 x 3), por ejemplo, tiene 4 filas y 3 columnas. Las matrices se crean com√∫nmente usando tablas de datos num√©ricos como las de una hoja de c√°lculo de Excel o un archivo csv. vector01 ## [1] 1 2 4 7 10 11 12 19 26 dim(vector01) ## NULL Dado que la variable es un vector, no tiene un atributo dim (entonces es simplemente NULL). ¬øQu√© ocurre si le damos a vector01 un atributo dim? dim(vector01) &lt;- c(3, 3) vector01 ## [,1] [,2] [,3] ## [1,] 1 7 12 ## [2,] 2 10 19 ## [3,] 4 11 26 class(vector01) ## [1] &quot;matrix&quot; &quot;array&quot; El ejemplo que utilizamos hasta ahora ten√≠a la intenci√≥n de ilustrar la idea de que una matriz es simplemente un vector con un atributo de dimensi√≥n. Un m√©todo m√°s directo para crear la misma matriz utiliza la funci√≥n matrix. matrix01 &lt;- matrix(vector01, nrow = 3, ncol = 3, byrow = T) matrix01 ## [,1] [,2] [,3] ## [1,] 1 2 4 ## [2,] 7 10 11 ## [3,] 12 19 26 arboles &lt;- c(&quot;Tipuana tipu&quot;, &quot;Myrsine andina&quot;, &quot;Salix humboldtiana&quot;) matrix02 &lt;- cbind(arboles, matrix01) # column bind o juntar por columna. matrix02 ## arboles ## [1,] &quot;Tipuana tipu&quot; &quot;1&quot; &quot;2&quot; &quot;4&quot; ## [2,] &quot;Myrsine andina&quot; &quot;7&quot; &quot;10&quot; &quot;11&quot; ## [3,] &quot;Salix humboldtiana&quot; &quot;12&quot; &quot;19&quot; &quot;26&quot; Esto se llama coerci√≥n impl√≠cita porque no lo hemos pedido. Solo sucedi√≥. Sin embargo, todav√≠a se desea trabajar con diferentes tipos de datos. class(matrix02) ## [1] &quot;matrix&quot; &quot;array&quot; dim(matrix02) ## [1] 3 4 rownames(matrix02) ## NULL colnames(matrix02) ## [1] &quot;arboles&quot; &quot;&quot; &quot;&quot; &quot;&quot; 2.11.5 Data Frame Un data frame es una estructura de datos bidimensional similar a una matriz, pero funciona de manera muy diferente. Si bien un data frame parece una tabla simple, de hecho es una lista de vectores de la misma longitud. Para los nuevos usuarios de R, las matrices y los data frames parecen similares. La principal diferencia es que un data frame permite tipos de datos mixtos (por ejemplo, num√©rico, l√≥gico, caracter). Esto les permite almacenar diferentes tipos de variables, lo cual es muy √∫til en el an√°lisis estad√≠stico. Por ejemplo, en un an√°lisis de regresi√≥n. Las matrices se usan principalmente para almacenar datos num√©ricos, y se pueden usar para √°lgebra matricial. Matrices y Data Frames, ambos representan tipos de datos rectangulares, lo que significa que se usan para almacenar datos tabulares, con filas y columnas. La principal diferencia, es que las matrices solo pueden contener una √∫nica clase de datos (al igual que los vectores), mientras que los dataframes pueden consistir de muchas clases diferentes de datos. # se crea un data frame (df) df01 &lt;- data.frame(arboles, matrix01) df01 ## arboles X1 X2 X3 ## 1 Tipuana tipu 1 2 4 ## 2 Myrsine andina 7 10 11 ## 3 Salix humboldtiana 12 19 26 class(df01) ## [1] &quot;data.frame&quot; # podemos cambiar el nombre a las variables (columnas) colnames(df01) &lt;- c(&quot;nombre_cientifico&quot;, &quot;circunferencia&quot;, &quot;diametro_copa&quot;, &quot;altura&quot; ) df01 ## nombre_cientifico circunferencia diametro_copa altura ## 1 Tipuana tipu 1 2 4 ## 2 Myrsine andina 7 10 11 ## 3 Salix humboldtiana 12 19 26 2.11.5.1 Conjunto de datos en R Varios conjuntos de datos tabulados o datasets se icluyen en la instalaci√≥n de R (en el paquete datasets) y por defecto se ecuentran cargados para su uso. la funcion data() lista todos los datasets de R. Trabajemos con el dataset iris (Edgar Anderson‚Äôs Iris Data) str(iris) ## &#39;data.frame&#39;: 150 obs. of 5 variables: ## $ Sepal.Length: num 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... ## $ Sepal.Width : num 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... ## $ Petal.Length: num 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... ## $ Petal.Width : num 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... ## $ Species : Factor w/ 3 levels &quot;setosa&quot;,&quot;versicolor&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... # todas las observaciones de la columna &#39;Species&#39; iris[, &quot;Species&quot;] ## [1] setosa setosa setosa setosa setosa setosa ## [7] setosa setosa setosa setosa setosa setosa ## [13] setosa setosa setosa setosa setosa setosa ## [19] setosa setosa setosa setosa setosa setosa ## [25] setosa setosa setosa setosa setosa setosa ## [31] setosa setosa setosa setosa setosa setosa ## [37] setosa setosa setosa setosa setosa setosa ## [43] setosa setosa setosa setosa setosa setosa ## [49] setosa setosa versicolor versicolor versicolor versicolor ## [55] versicolor versicolor versicolor versicolor versicolor versicolor ## [61] versicolor versicolor versicolor versicolor versicolor versicolor ## [67] versicolor versicolor versicolor versicolor versicolor versicolor ## [73] versicolor versicolor versicolor versicolor versicolor versicolor ## [79] versicolor versicolor versicolor versicolor versicolor versicolor ## [85] versicolor versicolor versicolor versicolor versicolor versicolor ## [91] versicolor versicolor versicolor versicolor versicolor versicolor ## [97] versicolor versicolor versicolor versicolor virginica virginica ## [103] virginica virginica virginica virginica virginica virginica ## [109] virginica virginica virginica virginica virginica virginica ## [115] virginica virginica virginica virginica virginica virginica ## [121] virginica virginica virginica virginica virginica virginica ## [127] virginica virginica virginica virginica virginica virginica ## [133] virginica virginica virginica virginica virginica virginica ## [139] virginica virginica virginica virginica virginica virginica ## [145] virginica virginica virginica virginica virginica virginica ## Levels: setosa versicolor virginica # Se utiliza el caracter ‚Äò$‚Äô para acceder a los campos o columnas. iris$Species ## [1] setosa setosa setosa setosa setosa setosa ## [7] setosa setosa setosa setosa setosa setosa ## [13] setosa setosa setosa setosa setosa setosa ## [19] setosa setosa setosa setosa setosa setosa ## [25] setosa setosa setosa setosa setosa setosa ## [31] setosa setosa setosa setosa setosa setosa ## [37] setosa setosa setosa setosa setosa setosa ## [43] setosa setosa setosa setosa setosa setosa ## [49] setosa setosa versicolor versicolor versicolor versicolor ## [55] versicolor versicolor versicolor versicolor versicolor versicolor ## [61] versicolor versicolor versicolor versicolor versicolor versicolor ## [67] versicolor versicolor versicolor versicolor versicolor versicolor ## [73] versicolor versicolor versicolor versicolor versicolor versicolor ## [79] versicolor versicolor versicolor versicolor versicolor versicolor ## [85] versicolor versicolor versicolor versicolor versicolor versicolor ## [91] versicolor versicolor versicolor versicolor versicolor versicolor ## [97] versicolor versicolor versicolor versicolor virginica virginica ## [103] virginica virginica virginica virginica virginica virginica ## [109] virginica virginica virginica virginica virginica virginica ## [115] virginica virginica virginica virginica virginica virginica ## [121] virginica virginica virginica virginica virginica virginica ## [127] virginica virginica virginica virginica virginica virginica ## [133] virginica virginica virginica virginica virginica virginica ## [139] virginica virginica virginica virginica virginica virginica ## [145] virginica virginica virginica virginica virginica virginica ## Levels: setosa versicolor virginica Cuando queremos extraer datos del data frame seg√∫n una condicion, esto se complica. head(iris[iris$Species == &quot;setosa&quot;, ]) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa As√≠ mismo, si se desea obtener las observaciones donde el ancho del s√©palo sea menor o igual a 3 y la especie sea ‚Äúsetosa‚Äù. head(iris[iris[, &quot;Sepal.Width&quot;] &lt;= 3 &amp; iris[, &quot;Species&quot;] == &quot;setosa&quot;, ]) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 2 4.9 3.0 1.4 0.2 setosa ## 9 4.4 2.9 1.4 0.2 setosa ## 13 4.8 3.0 1.4 0.1 setosa ## 14 4.3 3.0 1.1 0.1 setosa ## 26 5.0 3.0 1.6 0.2 setosa ## 39 4.4 3.0 1.3 0.2 setosa 2.11.5.2 Subsetting La funci√≥n subset nos facilita filtrar datos cuando queremos que se cumplan ciertas condiciones. subset(iris, Sepal.Width &lt;= 3 &amp; Species == &quot;setosa&quot;) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 2 4.9 3.0 1.4 0.2 setosa ## 9 4.4 2.9 1.4 0.2 setosa ## 13 4.8 3.0 1.4 0.1 setosa ## 14 4.3 3.0 1.1 0.1 setosa ## 26 5.0 3.0 1.6 0.2 setosa ## 39 4.4 3.0 1.3 0.2 setosa ## 42 4.5 2.3 1.3 0.3 setosa ## 46 4.8 3.0 1.4 0.3 setosa ¬øPero es la mejor opci√≥n? ¬øC√≥mo ordeno? ¬øC√≥mo cambio de un formato ‚Äúancho‚Äù a un formato ‚Äúlargo‚Äù (o viceversa)? etc. La tendencia en la comunidad R para el tratamiento de datos, comprende el uso de tidyverse. 2.11.6 Listas A diferencia de un vector, una lista es una colecci√≥n de elementos que pueden ser de diferente tipo. Los componentes de una lista son t√≠picamente pares clave-valor (key-value). El siguiente ejemplo muestra c√≥mo se puede almacenar un punto (con coordenas) en una lista. # Los elementos de la lista generalmente se acceden por nombre coordenadas &lt;- list(x = 10, y = 15) coordenadas ## $x ## [1] 10 ## ## $y ## [1] 15 point &lt;- list(id = 123, coord = coordenadas, spatial.reference = &quot;WGS_84&quot;) point ## $id ## [1] 123 ## ## $coord ## $coord$x ## [1] 10 ## ## $coord$y ## [1] 15 ## ## ## $spatial.reference ## [1] &quot;WGS_84&quot; point$id ## [1] 123 # Tambi√©n podemos acceder a sus elementos de la siguiente manera point[1] ## $id ## [1] 123 class(point[1]) ## [1] &quot;list&quot; # Para obtener el valor del elemento de la lista, use corchetes dobles point[[1]] ## [1] 123 class(point[[1]]) ## [1] &quot;numeric&quot; La lista, en el ejemplo, tiene tres elementos de diferentes tipos de datos. id es num√©rico, coord es otra lista y spatial.reference es una cadena de caracteres. La lista coord contiene dos elementos num√©ricos, x e y. Generalmente, se accede a los elementos de la lista usando su nombre, en lugar de n√∫mero. En particular, muchas estructuras de datos tienen elementos con nombre a los que se puede acceder utilizando los operadores $ o @. 2.12 Lectura / escritura de datos (.csv, .xlsx, .RData, .rds) En la pesta√±a en Entorno (Environment) de RStudio podemos importar conjuntos de datos o datasets con el asistente de importaci√≥n. No es recomendable cuando debemos importar varios archivos o si se van a leer archivos grandes. Para lo cual es m√°s eficiente usar c√≥digo. 2.12.1 CSV Si conocemos la estructura de nuestros datos (por ejemplo, la primera fila es el t√≠tulo de las columnas o es un archivo separado por comas), Se pueden utilizar las funciones read.csv (librer√≠a base) o read_csv (librer√≠a readr, de tidyverse): # datos ser√° un &#39;data frame&#39; data01 &lt;- read.csv(file = &#39;file.csv&#39;) head(data) ## ## 1 function (..., list = character(), package = NULL, lib.loc = NULL, ## 2 verbose = getOption(&quot;verbose&quot;), envir = .GlobalEnv, overwrite = TRUE) ## 3 { ## 4 fileExt &lt;- function(x) { ## 5 db &lt;- grepl(&quot;\\\\\\\\.[^.]+\\\\\\\\.(gz|bz2|xz)$&quot;, x) ## 6 ans &lt;- sub(&quot;.*\\\\\\\\.&quot;, &quot;&quot;, x) # datos ser√° un &#39;tibble&#39; data01 &lt;- readr::read_csv(file = &#39;file.csv&#39;) ## ## ‚îÄ‚îÄ Column specification ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ## cols( ## Sepal.Length = col_double(), ## Sepal.Width = col_double(), ## Petal.Length = col_double(), ## Petal.Width = col_double(), ## Species = col_character() ## ) data01 ## # A tibble: 150 x 5 ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa ## 7 4.6 3.4 1.4 0.3 setosa ## 8 5 3.4 1.5 0.2 setosa ## 9 4.4 2.9 1.4 0.2 setosa ## 10 4.9 3.1 1.5 0.1 setosa ## # ‚Ä¶ with 140 more rows En otros casos, cuando \";\" es utilizado como el separador de campo y \",\" para el punto decimal, se utiliza una variante de estas funciones. # datos ser√° un &#39;data frame&#39; data02 &lt;- read.csv(file = &#39;file.csv&#39;, sep = &#39;,&#39;, header = T) data02 &lt;- read.csv(file = &#39;file.csv&#39;, sep = &#39;,&#39;, header = F) La escritura de datos se realiza de la siguiente manera: readr::write_csv(x = data02, file = &quot;csv_data.csv&quot;) 2.12.2 EXCEL Es posible leer datos en la forma .xls o .xlsx. Existen distintos paquetes que nos permiten hacerlo: El paquete readxl contiene la funci√≥n read_excel. El paquete xlsx y la funci√≥n read.xlsx # datos ser√° un &#39;data frame&#39; data03 &lt;- readxl::read_xls(path = &#39;file.xls&#39;, sheet = 1) data03 &lt;- xlsx::read.xlsx(file = &quot;file.xls&quot;, 1) La escritura de datos se realiza de la siguiente manera: xlsx::write.xlsx( data03, &quot;xlsx_data.xlsx&quot;, sheetName = &quot;Sheet1&quot;, col.names = TRUE, row.names = TRUE, append = FALSE ) 2.12.3 RDS R proporciona dos formatos de archivo propios para almacenar datos, .RDS y .RData . Los archivos RDS pueden almacenar un solo objeto R y los archivos RData pueden almacenar varios objetos R. Puede abrir un archivo RDS con readRDS: data04 &lt;- readRDS(&quot;file.RDS&quot;) La escritura de datos se realiza de la siguiente manera: saveRDS(data04, file = &quot;rds_data.RDS&quot;) 2.12.4 RDATA La escritura de estos datos se realiza de la siguiente manera: a &lt;- 1 b &lt;- 2 c &lt;- 3 save(a, b, c, file = &quot;stuff.RData&quot;) Puede abrir un archivo RData con load: load(&quot;stuff.RData&quot;) 2.13 Ejercicios: 2.13.1 Ejercicio 1: Nota 1: Recuerden cargar todas las librerias necesarias si no lo hicieron. Nota 2: Fijense en su directorio de trabajo (working directory) Cargar el set de datos ‚Äúdata/earthquakes.csv‚Äù (ojo con el separador!). Cuantos registros y columnas tiene? Imprimir la columna Magnitude y luego el registro numero 10 de esa columna 2.13.2 Ejercicio 2: Nota 1: Recuerden cargar todas las librerias necesarias si no lo hicieron. Nota 2: Fijense en su directorio de trabajo (working directory) Nota 3: Copia para no perder los datos originales (buena pr√°ctica) Obtener un dataset con todos los distritos que tienen 0 en la columna Incidencia. (tener cargado el dataset data/pobreza_extrema.csv) Convertir al distrito ‚ÄúLos Olivos‚Äù en el de m√°s extrema pobreza la variable Incidencia. Luego explorar los datos. Crear un data frame que tenga todos los distritos de la regi√≥n Ancash e Ica sin poblaci√≥n en extrema pobreza 2.13.3 Ejercicio 3: Nota 1: Recuerden cargar todas las librerias necesarias si no lo hicieron. Nota 2: Fijense en su directorio de trabajo (working directory) Cargar el set de datos ‚Äúdata/earthquakes.csv‚Äù. Los datos historicos reprentan la ubicaci√≥n de los terremotos. Hacer una descripcion visual y num√©rica de la variable Magnitude. ¬øSe observa algo raro?, ¬øQu√© variables parecen tener valores extremos o outliers? ¬øHay nulos (NA)? Quedarse con los datos con valores extremos (superior a la media mas 3 veces la desviaci√≥n estandar). Calcular percentil 98 "]]
